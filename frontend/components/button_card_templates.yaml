######################
#### BASIC STYLES ####
######################
feedback_click:
  styles:
    card:
      - "--mdc-ripple-color": var(--paper-item-icon-active-color)
      - "--mdc-ripple-press-opacity": 0.2

no_background:
  styles:
    card:
      - background-color: "rgba(0, 0, 0, 0.0)"
      - box-shadow: none

grey_background:
  styles:
    card:
      - background: var(--primary-background-color)

width_50:
  styles:
    card:
      - width: 50px

row_space_10:
  template: no_background
  tap_action:
    action: none
  styles:
    card:
      - height: 10px
      - padding: 0px

grid_style:
  styles:
    card:
      - background: none
      - padding-top: 15px
      - "--mdc-ripple-press-opacity": 0

program_layout:
  card_mod:
    style: |
      #content::-webkit-scrollbar {
        display: none !important;
      }
  styles:
    card:
      - background: none
      - padding-top: 15px
      - padding-bottom: 0px
    grid:
      - grid-template-areas: |
          "header"
          "content"
          "commandbar"
      - grid-template-columns: 1fr
      - grid-auto-rows: auto
      - row-gap: 3px
      - column-gap: 10px
      - margin-left: 10px
      - margin-right: 10px
    custom_fields:
      header:
        - margin-bottom: 2px
        - margin-left: -10px
        - height: 46px
      content:
        - height: 300px
        - margin-top: 5px
        - overflow: auto

program_content:
  styles:
    card:
      - background: none
      - padding-top: 15px
      - padding-bottom: 0px
    grid:
      - grid-template-areas: |
          "program"
          "content"
      - grid-template-columns: 1fr
      - row-gap: 10px

program_schedule:
  styles:
    card:
      - padding: 0%
    grid:
      - grid-template-areas: '"days time"'
      - grid-template-columns: 1fr 1fr
      - height: 170px
    custom_fields:
      days:
        - display: flex
        - justify-content: space-evenly
        - box-shadow: none
        - margin-bottom: 32px
      time:
        - box-shadow: none
        - padding: 10px

program_ctrl:
  styles:
    grid:
      - grid-template-areas: '"label temp"'
      - background: none
    card:
      - box-shadow: none
      - background: var(--primary-background-color)
    custom_fields:
      temp:
        - width: 160px

time_picker:
  styles:
    grid:
      - grid-template-areas: '"time"'
    card:
      - box-shadow: none

icon_ctrl_style:
  styles:
    card:
      - align-self: center
      - background: none
      - box-shadow: none
      - padding-top: 4px
    icon:
      - color: var(--temperature-secondary-color)

expander_template:
  styles:
    grid:
      - grid-template-areas: '"expander"'
    card:
      - padding: 0px
  card_mod:
    style:
      expander-card$: |
        .expander-card {
          min-height: 100px;
        }

weekdays:
  styles:
    grid:
      - grid-template-areas: '"days"'
    card:
      - box-shadow: none

####################
###### HEADER ######
####################

header_page_text:
  template: no_background
  show_icon: true
  show_label: true
  show_name: true
  show_state: false
  styles:
    card:
      - padding-top: 0px
    grid:
      - grid-template-areas: '"i n" "i l"'
      - grid-template-columns: 60px 1fr
      - grid-template-rows: min-content min-content
    name:
      - justify-self: left
      - font-size: 120%
      - font-weight: bold
      - color: var(--paper-item-icon-active-color)
    label:
      - justify-self: left
      - font-size: 80%
    icon:
      - width: 42px
      - height: 42px
      - color: var(--ha-card-header-color)
  tap_action:
    action: none

header_icon_label:
  template: no_background
  show_name: false
  show_state: false
  show_label: true
  styles:
    card:
      - padding-top: 7px
      - width: 73px
    label:
      - font-size: 80%
      - font-weight: bold
      - color: var(--paper-item-icon-active-color)
    icon:
      - width: 32px
      - height: 32px

user_profile_header:
  type: "custom:button-card"
  entity: person.utente
  template: header_icon_label
  show_icon: false
  show_entity_picture: true
  tap_action:
    action: none

user_notification_header:
  type: "custom:button-card"
  entity: input_boolean.notification_to_read
  template: header_icon_label
  show_icon: false
  show_entity_picture: true
  extra_styles: >
    @keyframes tilt-shaking {
      5% { transform: rotate(10deg); }
      15% { transform: rotate(-10deg); }
      10%, 20%, 100% { transform: rotate(0deg); }
    }
  state:
    - value: "on"
      styles:
        icon:
          - animation: tilt-shaking 5s linear infinite
  entity_picture: >
    [[[
      if (entity.state == 'on' ) return '/local/images/notification.png'  ;
      if (entity.state == 'off' ) return '/local/images/bell.png';
      return '';
    ]]]
  tap_action:
    action: navigate
    navigation_path: /lovelace-kairoshub/notification

documentation_header:
  template: header_icon_label
  label: "Manuale"
  show_icon: true
  icon: mdi:book-outline
  color: grey
  tap_action:
    action: navigate
    navigation_path: /lovelace-kairoshub/documentation

icon_state_header:
  template: header_icon_label
  layout: name_state
  show_icon: true
  styles:
    card:
      - width: 80px
      - font-size: 90%
    label:
      - color: "#f4f4f4"

####################
# NAVIGATION BUTTONS
####################

button_go_to_program:
  template: icon_state_header
  icon: '[[[ return "mdi:numeric-" + variables.progId + "-box-outline"]]]'
  state:
    - value: "on"
      color: var(--command-state-active-color)
    - value: "off"
      color: var(--command-state-color)
  tap_action:
    action: navigate
    navigation_path: '[[[ return "/lovelace-kairoshub/" + variables.navigation_path]]]'
  styles:
    card:
      - width: 63px
      - background: none
  style: |
    :host {
      align-self: center;
    }

button_go_back:
  template: feedback_click
  name: "Indietro"
  tap_action:
    action: navigate
    navigation_path: "[[[window.history.back()]]]"
  styles:
    card:
      - width: 150px
      - background: none
      - box-shadow: none
    name:
      - color: "#f4f4f4"
      - font-weight: bold
  style: |
    :host {
      align-self: center;
    }

#####################
#### PAGE LAYOUT ####
#####################

basic_page_layout:
  template: grid_style
  card_mod:
    style: |
      #content::-webkit-scrollbar {
        display: none !important;
      }
  styles:
    grid:
      - grid-template-areas: '"header" "content" "commandbar"'
    custom_fields:
      header:
        - margin-bottom: 2px
        - height: 46px
      content:
        - height: 300px
        - margin-top: 5px
        - overflow: auto

###################
###### CLIMA ######
###################

clima_detail:
  icon: "[[[return variables.icon]]]"
  template: no_background
  triggers_update:
    - input_boolean.heater_program1_on
    - input_boolean.heater_program2_on
    - input_boolean.heater_program3_on
    - input_boolean.heater_program4_on
  styles:
    card:
      - padding: 1%
    grid:
      - grid-template-areas: '"i name . temp" "lastupdate info . humidity"'
      - grid-template-columns: 50px 1fr auto
      - grid-template-rows: 50px 30px
      - column-gap: 5px
    img_cell:
      - justify-content: start
      - align-items: start
      - margin: none
    icon:
      - width: 70%
      - color: >
          [[[
            var color = "#000000"
            var input = `input_boolean.heater_zn${variables.zoneId}_program`;
            if ((""+variables.zoneId).endsWith("00"))
              input = input.replace("input_boolean", "group");
            for (var i=1; i<5; i++) {
              if (states[input+`${i}_on`].state === "on") {
                color = "var(--command-state-active-color)";
              }
            }
            return color;
          ]]]
    custom_fields:
      name:
        - font-weight: bold
        - font-size: 16px
        - align-self: middle
        - justify-self: start
        - padding-bottom: 4px
        - padding-right: 5px
        - padding-top: 5px
      lastupdate:
        - justify-self: start
      humidity:
        - justify-self: end
      temp:
        - justify-self: end
      active:
        - justify-self: end
      alert:
        - justify-self: end
      info:
        - justify-self: start
        - align-self: flex-end
        - margin-left: 50px
  custom_fields:
    temp: >
      [[[
        var zoneTemperature = states[`sensor.tz${variables.zoneId}`].state;
        var tempColor = 'var(--temperature-secondary-color)';
        var targetTempColor = 'var(--temperature-tertiary-color)';
        var zoneID = variables.zoneId + "";
        var comfortTemp = states[`input_number.temperature_tv${zoneID[0]}00_manual`].state;
        var programTemp = `input_number.temperature_zn${variables.zoneId}_period`;

        for (var i=1; i<5; i++) {
          if (states[`input_boolean.heater_program${i}_on`].state === "on") {
            comfortTemp = states[programTemp+i].state;
          }
        }
        if (zoneTemperature >= comfortTemp) {
          tempColor = 'var(--temperature-primary-color)';
        }

        return `<div style="align-items: center; display: flex;">
          <span style="font-size: 18px; font-weight: 600; color: ${tempColor};">${zoneTemperature}&nbsp;</span>
          <span style="font-size: 18px; font-weight: 600; color: ${targetTempColor};">/ ${comfortTemp}Â°C </span>
          <ha-icon icon="mdi:thermometer"
            style="color: ${targetTempColor}; width: 24px; padding: 5px; margin: 0px;"/>
          </div>`;
      ]]]
    humidity: >
      [[[
        var humidity = states[`sensor.hz${variables.zoneId}`].state;
        if (humidity != "unknown" && humidity != "unavailable")
          return `<div style="align-items: center; display: flex;"><span style="font-size: 18px; font-weight: 600; color: var(--humidity-primary-color);">${ humidity }%</span>
            <ha-icon icon="mdi:water-percent"
              style="color: var(--humidity-primary-color); width: 24px; padding: 5px; margin: 0px;"/>
          </div>`;
        return "</>";
      ]]]
    lastupdate: >
      [[[
        var datetime =  states[`sensor.tz${variables.zoneId}`].last_changed.split("T");
        datetime = new Date(datetime).toLocaleString().replace(","," ");
        var lastupdate = datetime.substring(0,datetime.length-3);
        return `<span style="font-size: 12px;">${lastupdate }</span>`
      ]]]
    info:
      card:
        type: "custom:button-card"
        template: no_background
        custom_fields:
          alert: >
            [[[
              var input = `input_boolean.zn${variables.zoneId}_alert`;
              if ((""+variables.zoneId).endsWith("00"))
                input = input.replace("input_boolean", "group");
              if (states[input].state === "on")
                return '<ha-icon icon="mdi:alert-circle-outline" style="width: 24px; color: red; margin-right: 5px;" />';
              return "</>";
            ]]]
        variables:
          zoneId: "[[[return variables.zoneId;]]]"
    name: >
      [[[
        var name = states[`input_text.zn${variables.zoneId}`].state;
        var label = "";
        var input = `input_boolean.heater_zn${variables.zoneId}_program`;
        if ((""+variables.zoneId).endsWith("00"))
          input = input.replace("input_boolean", "group");
        for (var i=1; i<5; i++) {
          if (states[input+`${i}_on`].state === "on") {
            label = "ATTIVO";
          }
        }
        return `<div style="display: flex; flex-direction: column; align-items: flex-start;">
          <span>${name}</span>
          <span style="font-size: 10px;">${label}</span>
          </div>`;
      ]]]

clima_nightzone_expander:
  template: expander_template
  custom_fields:
    expander:
      card:
        <<: &expander-card-style
          type: "custom:expander-card"
          padding: 10px
          gap: 1px
        title-card:
          type: "custom:button-card"
          template: clima_detail
          triggers_update:
            - sensor.tz100
            - sensor.hz100
            - input_text.zn100
            - input_number.temperature_zn100_period1
            - input_number.temperature_zn100_period2
            - input_number.temperature_zn100_period3
            - input_number.temperature_zn100_period4
            - group.zn100_alert
            - group.heater_zn100_program1_on
            - group.heater_zn100_program2_on
            - group.heater_zn100_program3_on
            - group.heater_zn100_program4_on
          variables:
            zoneId: "[[[ return variables.zoneId;]]]"
            icon: "[[[ return variables.icon;]]]"
        cards:
          - <<: &divider-2px
              type: entities
              card_mod:
                style: |
                  div.card-content {
                    padding: 0px;
                  }
              entities:
                - type: divider
                  style:
                    background-color: "#000000"
                    height: 2px
          - type: custom:mod-card
            card_mod:
              style:
                hui-grid-card$: |
                  div#root {
                    background: var(--primary-background-color);
                  }
            card:
              type: grid
              columns: 2
              square: false
              cards:
                - type: conditional
                  conditions:
                    - entity: sensor.tz101
                      state: unknown
                    - entity: sensor.tz102
                      state: unknown
                    - entity: sensor.tz103
                      state: unknown
                    - entity: sensor.tz104
                      state: unknown
                  card:
                    type: "custom:button-card"
                    template: no_background
                    name: >
                      [[[
                        return `
                        <ha-alert alert-type="warning" style="justify-self: center;">
                          Non ci sono zone attive </br>
                        </ha-alert>`;
                      ]]]
                    tap_action:
                      action: none
                - type: conditional
                  conditions:
                    - entity: sensor.tz101
                      state_not: "unknown"
                  card:
                    type: "custom:button-card"
                    template: clima_detail
                    triggers_update:
                      - input_number.temperature_zn101_period1
                      - input_number.temperature_zn101_period2
                      - input_number.temperature_zn101_period3
                      - input_number.temperature_zn101_period4
                      - input_boolean.zn101_alert
                      - input_boolean.heater_zn101_program1_on
                      - input_boolean.heater_zn101_program2_on
                      - input_boolean.heater_zn101_program3_on
                      - input_boolean.heater_zn101_program4_on
                    variables:
                      zoneId: 101
                      icon: "mdi:bed-outline"
                - type: conditional
                  conditions:
                    - entity: sensor.tz102
                      state_not: "unknown"
                  card:
                    type: "custom:button-card"
                    template: clima_detail
                    triggers_update:
                      - input_number.temperature_zn102_period1
                      - input_number.temperature_zn102_period2
                      - input_number.temperature_zn102_period3
                      - input_number.temperature_zn102_period4
                      - input_boolean.zn102_alert
                      - input_boolean.heater_zn102_program1_on
                      - input_boolean.heater_zn102_program2_on
                      - input_boolean.heater_zn102_program3_on
                      - input_boolean.heater_zn102_program4_on
                    variables:
                      zoneId: 102
                      icon: "mdi:bed-outline"
                - type: conditional
                  conditions:
                    - entity: sensor.tz103
                      state_not: "unknown"
                  card:
                    type: "custom:button-card"
                    template: clima_detail
                    triggers_update:
                      - input_number.temperature_zn103_period1
                      - input_number.temperature_zn103_period2
                      - input_number.temperature_zn103_period3
                      - input_number.temperature_zn103_period4
                      - input_boolean.zn103_alert
                      - input_boolean.heater_zn103_program1_on
                      - input_boolean.heater_zn103_program2_on
                      - input_boolean.heater_zn103_program3_on
                      - input_boolean.heater_zn103_program4_on
                    variables:
                      zoneId: 103
                      icon: "mdi:bed-outline"
                - type: conditional
                  conditions:
                    - entity: sensor.tz103
                      state_not: "unknown"
                  card:
                    type: "custom:button-card"
                    template: clima_detail
                    triggers_update:
                      - input_number.temperature_zn104_period1
                      - input_number.temperature_zn104_period2
                      - input_number.temperature_zn104_period3
                      - input_number.temperature_zn104_period4
                      - input_boolean.zn104_alert
                      - input_boolean.heater_zn103_program1_on
                      - input_boolean.heater_zn103_program2_on
                      - input_boolean.heater_zn103_program3_on
                      - input_boolean.heater_zn103_program4_on
                    variables:
                      zoneId: 104
                      icon: "mdi:shower"

clima_dayzone_expander:
  template: expander_template
  custom_fields:
    expander:
      card:
        <<: *expander-card-style
        title-card:
          type: "custom:button-card"
          template: clima_detail
          triggers_update:
            - sensor.tz200
            - sensor.hz200
            - input_text.zn200
            - input_number.temperature_zn200_period1
            - input_number.temperature_zn200_period2
            - input_number.temperature_zn200_period3
            - input_number.temperature_zn200_period4
            - group.zn200_alert
            - group.heater_zn200_program1_on
            - group.heater_zn200_program2_on
            - group.heater_zn200_program3_on
            - group.heater_zn200_program4_on
          variables:
            zoneId: "[[[ return variables.zoneId;]]]"
            icon: "[[[return variables.icon;]]]"
        cards:
          - <<: *divider-2px
          - type: "custom:mod-card"
            card_mod:
              style:
                hui-grid-card$: |
                  div#root {
                    background: var(--primary-background-color);
                  }
            card:
              type: grid
              columns: 2
              square: false
              cards:
                - type: conditional
                  conditions:
                    - entity: sensor.tz201
                      state: unknown
                    - entity: sensor.tz202
                      state: unknown
                    - entity: sensor.tz203
                      state: unknown
                  card:
                    type: "custom:button-card"
                    template: no_background
                    name: >
                      [[[
                        return `
                        <ha-alert alert-type="warning" style="justify-self: center;">
                          Non ci sono zone attive </br>
                        </ha-alert>`;
                      ]]]
                    tap_action:
                      action: none
                - type: conditional
                  conditions:
                    - entity: sensor.tz201
                      state_not: "unknown"
                  card:
                    type: "custom:button-card"
                    template: clima_detail
                    triggers_update:
                      - input_number.temperature_zn201_period1
                      - input_number.temperature_zn201_period2
                      - input_number.temperature_zn201_period3
                      - input_number.temperature_zn201_period4
                      - input_boolean.zn201_alert
                      - input_boolean.heater_zn201_program1_on
                      - input_boolean.heater_zn201_program2_on
                      - input_boolean.heater_zn201_program3_on
                      - input_boolean.heater_zn201_program4_on
                    variables:
                      zoneId: 201
                      icon: "mdi:sofa-outline"
                - type: conditional
                  conditions:
                    - entity: sensor.tz202
                      state_not: "unknown"
                  card:
                    type: "custom:button-card"
                    template: clima_detail
                    triggers_update:
                      - input_number.temperature_zn202_period1
                      - input_number.temperature_zn202_period2
                      - input_number.temperature_zn202_period3
                      - input_number.temperature_zn202_period4
                      - input_boolean.zn202_alert
                      - input_boolean.heater_zn202_program1_on
                      - input_boolean.heater_zn202_program2_on
                      - input_boolean.heater_zn202_program3_on
                      - input_boolean.heater_zn202_program4_on
                    variables:
                      zoneId: 202
                      icon: "mdi:countertop-outline"
                - type: conditional
                  conditions:
                    - entity: sensor.tz203
                      state_not: "unknown"
                  card:
                    type: "custom:button-card"
                    template: clima_detail
                    triggers_update:
                      - input_number.temperature_zn203_period1
                      - input_number.temperature_zn203_period2
                      - input_number.temperature_zn203_period3
                      - input_number.temperature_zn203_period4
                      - input_boolean.zn203_alert
                      - input_boolean.heater_zn202_program1_on
                      - input_boolean.heater_zn202_program2_on
                      - input_boolean.heater_zn202_program3_on
                      - input_boolean.heater_zn202_program4_on
                    variables:
                      zoneId: 203
                      icon: "mdi:toilet"

temperature_value:
  icon: "mdi:thermometer"
  show_state: true
  show_icon: false
  show_name: false
  show_label: false
  size: 20%
  state:
    - value: "20.0"
      operator: <=
      color: var(--temperature-secondary-color)
      styles:
        state:
          - color: var(--temperature-secondary-color)
    - value: "24.0"
      operator: <
      color: orange
      styles:
        state:
          - color: orange
    - value: "24.0"
      operator: ">="
      color: var(--temperature-primary-color)
      styles:
        state:
          - color: var(--temperature-primary-color)
  tap_action:
    action: none
  styles:
    state:
      - font-size: 26px
      - font-weight: bold
    icon:
      - size: 20%
    card:
      - box-shadow: none
  style: |
    :host {
      align-self: center;
    }

temperature_ctrl_plus:
  icon: mdi:thermometer-plus
  size: 30%
  styles:
    card:
      - background: none
      - box-shadow: none
      - padding-top: 4px
    icon:
      - color: var(--temperature-primary-color)
      - filter: opacity(0.75)
  tap_action:
    action: call-service
    service: input_number.increment
    service_data:
      entity_id: "[[[ return variables.entity; ]]]"

temperature_ctrl_minus:
  template: icon_ctrl_style
  icon: "mdi:thermometer-minus"
  size: 30%
  tap_action:
    action: call-service
    service: input_number.decrement
    service_data:
      entity_id: "[[[ return variables.entity; ]]]"

heating_program_schedule:
  template: program_schedule
  custom_fields:
    days:
      card:
        type: "custom:button-card"
        template: heating_week
        variables:
          progId: "[[[return variables.progId;]]]"
    time:
      card:
        type: "custom:button-card"
        template: heating_time_picker
        variables:
          progId: "[[[return variables.progId;]]]"

heating_program_label:
  layout: icon_name
  icon: "mdi:power"
  size: 65%
  state:
    - value: "off"
      color: black
    - value: "on"
      color: "#DCA200"
  styles:
    card:
      - box-shadow: none

heating_program_layout:
  template:
    - grid_style
    - program_layout
  custom_fields:
    header:
      card:
        type: "custom:button-card"
        entity: "[[[return `input_boolean.heater_program${variables.progId}`]]]"
        template: header_page_text
        icon: "mdi:calendar-remove"
        state:
          - value: "on"
            icon: "mdi:calendar-check"
            styles:
              icon:
                - color: var(--command-state-active-color)
        name: "[[[return `PROGRAMMA ${variables.progId}`]]]"
        label: "[[[return `Clima / Programma ${variables.progId}`]]]"
    commandbar:
      card:
        type: "custom:button-card"
        template: heating_command_bar
        variables:
          progId: "[[[return variables.progId]]]"
    content:
      card:
        type: "custom:button-card"
        template: heating_program_content
        variables:
          progId: "[[[return variables.progId]]]"
        styles:
          card:
            - padding: 0px

heating_program_content:
  template:
    - grid_style
    - program_content
  custom_fields:
    program:
      card:
        type: "custom:button-card"
        template: heating_program_schedule
        variables:
          progId: "[[[return variables.progId]]]"
    content:
      card:
        type: vertical-stack
        cards:
          - type: conditional
            conditions:
              - entity: sensor.tz100
                state_not: "unknown"
            card:
              type: "custom:button-card"
              template: heating_program_expander_nightzone
              variables:
                progId: "[[[return variables.progId]]]"
          - type: conditional
            conditions:
              - entity: sensor.tz200
                state_not: "unknown"
            card:
              type: "custom:button-card"
              template: heating_program_expander_dayzone
              variables:
                progId: "[[[return variables.progId]]]"

heating_program_day:
  entity: "[[[return `input_boolean.thermostat_monday_program${variables.progId}`]]]"
  color_type: card
  state:
    - value: "on"
      color: var(--command-state-active-color)
      styles:
        card:
          - border-color: var(--command-state-active-color)
          - color: white
  styles:
    card:
      - border-color: var(--paper-item-icon-color)
      - border-style: double
      - border-width: 2px
      - height: 30px
      - width: 60px

heating_week:
  template: weekdays
  custom_fields:
    days:
      card:
        type: vertical-stack
        cards:
          - type: "custom:button-card"
            template: no_background
            name: "Giorni"
            styles:
              card:
                - padding-top: 0px
              name:
                - margin: 0px auto
                - font-size: large
          - type: grid
            columns: 4
            square: false
            cards:
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.thermostat_monday_program${variables.progId}`]]]"
                name: LUN
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.thermostat_tuesday_program${variables.progId}`]]]"
                name: MAR
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.thermostat_wednesday_program${variables.progId}`]]]"
                name: MER
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.thermostat_thursday_program${variables.progId}`]]]"
                name: GIO
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.thermostat_friday_program${variables.progId}`]]]"
                name: VEN
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.thermostat_saturday_program${variables.progId}`]]]"
                name: SAB
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.thermostat_sunday_program${variables.progId}`]]]"
                name: DOM
              - type: "custom:button-card"
                template: heating_program_label
                entity: "[[[return `group.program${variables.progId}_days`]]]"
                layout: icon_name
                name: "Tutti"
                size: 100%
                show_label: false
                show_name: true
                styles:
                  card:
                    - height: 30px
                    - width: 60px

heating_time_picker:
  template: time_picker
  custom_fields:
    time:
      card:
        type: horizontal-stack
        cards:
          - entity: "[[[return `input_datetime.thermostat_on_period${variables.progId}`]]]"
            <<: &timepicker_style
              type: custom:time-picker-card
              minute_step: 5
              layout:
                embedded: true
                align_controls: right
              style: |
                state-badge {
                  display: none;
                }
                .time-picker-row.embedded {
                  flex-direction: column;
                }
          - entity: "[[[return `input_datetime.thermostat_off_period${variables.progId}`]]]"
            <<: *timepicker_style

heating_command_bar:
  type: "custom:button-card"
  template: command_bar
  style: |
    ha-card.button-card-main {
      padding: 0px !important
    }
  styles:
    card:
      - margin-left: -10px
  custom_fields:
    commands:
      card:
        type: horizontal-stack
        cards:
          - type: "custom:button-card"
            template:
              - icon_state_header
            icon: mdi:power
            state:
              - value: "on"
                label: "Acceso"
                color: var(--command-state-active-color)
              - value: "off"
                label: "Spento"
                color: var(--command-state-color)
            entity: "[[[return `input_boolean.heater_program${variables.progId}`]]]"
          - type: "custom:button-card"
            template:
              - feedback_click
              - temperature_ctrl_minus
            styles:
              card:
                - left: 60px
                - bottom: -5px
            variables:
              entity: "[[[return `input_number.temperature_period${variables.progId}`]]]"
          - type: "custom:button-card"
            entity: "[[[return `input_number.temperature_period${variables.progId}`]]]"
            template:
              - no_background
              - temperature_value
          - type: "custom:button-card"
            template:
              - feedback_click
              - temperature_ctrl_plus
            styles:
              card:
                - left: -60px
                - bottom: -5px
            variables:
              entity: "[[[return `input_number.temperature_period${variables.progId}`]]]"
          - type: "custom:button-card"
            template: button_go_back

heating_program_expander_nightzone:
  template: expander_template
  custom_fields:
    expander:
      card:
        <<: *expander-card-style
        title-card:
          type: "custom:button-card"
          template: heating_program_expander_zone
          variables:
            progId: "[[[return variables.progId]]]"
            zone: zn100
        cards:
          - <<: &divider-4px
              type: entities
              card_mod:
                style: |
                  div.card-content {
                    padding: 0px;
                  }
              entities:
                - type: divider
                  style:
                    background-color: "#000000"
                    height: 4px
          - <<: &mod-card-room
              type: custom:mod-card
              card_mod:
                style:
                  hui-grid-card$: |
                    div#root {
                      background: var(--primary-background-color);
                    }
            card:
              type: grid
              columns: 2
              square: false
              cards:
                - type: conditional
                  conditions:
                    - entity: sensor.tz101
                      state_not: "unknown"
                  card:
                    type: "custom:button-card"
                    template: heating_program_expander_room
                    variables:
                      progId: "[[[return variables.progId]]]"
                      zone: zn101
                - type: conditional
                  conditions:
                    - entity: sensor.tz102
                      state_not: "unknown"
                  card:
                    type: "custom:button-card"
                    template: heating_program_expander_room
                    variables:
                      progId: "[[[return variables.progId]]]"
                      zone: zn102
                - type: conditional
                  conditions:
                    - entity: sensor.tz103
                      state_not: "unknown"
                  card:
                    type: "custom:button-card"
                    template: heating_program_expander_room
                    variables:
                      progId: "[[[return variables.progId]]]"
                      zone: zn103
                - type: conditional
                  conditions:
                    - entity: sensor.tz104
                      state_not: "unknown"
                  card:
                    type: "custom:button-card"
                    template: heating_program_expander_room
                    variables:
                      progId: "[[[return variables.progId]]]"
                      zone: zn104

heating_program_expander_dayzone:
  template: expander_template
  custom_fields:
    expander:
      card:
        <<: *expander-card-style
        title-card:
          type: "custom:button-card"
          template: heating_program_expander_zone
          variables:
            progId: "[[[return variables.progId]]]"
            zone: zn200
        cards:
          - <<: *divider-4px
          - <<: *mod-card-room
            card:
              type: grid
              columns: 2
              square: false
              cards:
                - type: conditional
                  conditions:
                    - entity: sensor.tz201
                      state_not: "unknown"
                  card:
                    type: "custom:button-card"
                    template: heating_program_expander_room
                    variables:
                      progId: "[[[return variables.progId]]]"
                      zone: zn201
                - type: conditional
                  conditions:
                    - entity: sensor.tz202
                      state_not: "unknown"
                  card:
                    type: "custom:button-card"
                    template: heating_program_expander_room
                    variables:
                      progId: "[[[return variables.progId]]]"
                      zone: zn202
                - type: conditional
                  conditions:
                    - entity: sensor.tz203
                      state_not: "unknown"
                  card:
                    type: "custom:button-card"
                    template: heating_program_expander_room
                    variables:
                      progId: "[[[return variables.progId]]]"
                      zone: zn203

heating_program_expander_zone:
  styles:
    grid:
      - grid-template-areas: '"label temp"'
      - background: none
      - display: flex
      - justify-content: space-between
    card:
      - padding: 0px
      - box-shadow: none
    custom_fields:
      temp:
        - width: 200px
  custom_fields:
    label:
      card:
        type: "custom:button-card"
        template: heating_program_label
        size: 50%
        entity: "[[[return `group.heater_${variables.zone}_program${variables.progId}`]]]"
        name: "[[[return states[`input_text.${variables.zone}`].state;]]]"
    temp:
      card:
        type: horizontal-stack
        cards:
          - type: custom:button-card
            template: temperature_ctrl_minus
            icon: mdi:minus
            size: 40%
            variables:
              entity: "[[[return `input_number.temperature_${variables.zone}_period${variables.progId}`]]]"
          - type: "custom:button-card"
            entity: "[[[return `input_number.temperature_${variables.zone}_period${variables.progId}`]]]"
            template: temperature_value
          - type: custom:button-card
            template: temperature_ctrl_plus
            icon: mdi:plus
            size: 40%
            variables:
              entity: "[[[return `input_number.temperature_${variables.zone}_period${variables.progId}`]]]"

heating_program_expander_room:
  template: program_ctrl
  custom_fields:
    label:
      card:
        type: "custom:button-card"
        template:
          - heating_program_label
          - grey_background
        entity: "[[[return `input_boolean.heater_${variables.zone}_program${variables.progId}`]]]"
        name: "[[[return states[`input_text.${variables.zone}`].state;]]]"
        size: 45%
    temp:
      card:
        type: custom:mod-card
        card_mod:
          style:
            hui-horizontal-stack-card:
              $: |
                #root > * {
                  margin: 0px !important;
                }
        card:
          type: horizontal-stack
          cards:
            - type: custom:button-card
              template:
                - temperature_ctrl_minus
                - width_50
              icon: mdi:minus
              size: 50%
              variables:
                entity: "[[[return `input_number.temperature_${variables.zone}_period${variables.progId}`]]]"
            - type: "custom:button-card"
              template:
                - temperature_value
                - grey_background
              entity: "[[[return `input_number.temperature_${variables.zone}_period${variables.progId}`]]]"
            - type: custom:button-card
              template:
                - temperature_ctrl_plus
                - width_50
              icon: mdi:plus
              size: 50%
              variables:
                entity: "[[[return `input_number.temperature_${variables.zone}_period${variables.progId}`]]]"

################
## TAPPARELLE ##
################

rollers_detail:
  icon: "[[[ return variables.icon;]]]"
  template: no_background
  styles:
    card:
      - padding: 1%
    grid:
      - grid-template-areas: '"i name . control" "lastupdate . . ."'
      - grid-template-columns: 50px 1fr auto
      - grid-template-rows: 50px 30px
      - column-gap: 5px
      - background: none
      - justify-content: space-between
    img_cell:
      - justify-content: start
      - align-items: start
      - margin: none
    icon:
      - width: 70%
      - color: >
          [[[
            var color = "#000000"
            if (states[`sensor.rz${variables.zone}`].state > 0.0)
              color = "var(--command-state-active-color)"
            return color;
          ]]]
    custom_fields:
      name:
        - font-weight: bold
        - font-size: 16px
        - align-self: middle
        - justify-self: start
        - padding-bottom: 4px
        - padding-right: 5px
        - padding-top: 5px
      control:
        - justify-self: end
      lastupdate:
        - justify-self: start
  custom_fields:
    name: >
      [[[
        var name = states[`input_text.zn${variables.zone}`].state;
        var label = "CHIUSE";
        var state = states[`sensor.rz${variables.zone}`].state;
        if (state == 100.0) label = "APERTE"
        if (state > 0.0 && state < 100.0) label = `APERTE AL ${~~state}%`
        return `<div
          style="display: flex;
          flex-direction: column;
          align-items: flex-start;">
            <span>${name}</span>
            <span style="font-size: 10px;">${label}</span>
          </div>`;
      ]]]
    control:
      card:
        type: horizontal-stack
        cards:
          - type: "custom:button-card"
            template: rollers_ctrl
            icon: "mdi:arrow-down"
            variables:
              zone: "[[[return variables.zone]]]"
              option: "closed"
          - type: "custom:button-card"
            template: rollers_ctrl
            icon: "mdi:pause-octagon-outline"
            entity: "[[[return `group.rs${variables.zone}`]]]"
            extra_styles: |
              @keyframes blink-alert {
                0% {
                  opacity: 0.3;
                }
                50% {
                  opacity: 1;
                }
                100% {
                  opacity: 0.3;
                }
              }
            state:
              - value: "stop"
                icon: mdi:pause-octagon-outline
                styles:
                  icon:
                    - animation: blink-alert 2s ease infinite
                    - color: "#FF1500"
            variables:
              zone: "[[[return variables.zone]]]"
              option: "stop"
          - type: "custom:button-card"
            template: rollers_ctrl
            icon: "mdi:arrow-up"
            variables:
              zone: "[[[return variables.zone]]]"
              option: "open"
    lastupdate: >
      [[[
        var datetime =  states[`group.rs${variables.zone}`].last_changed.split("T");
        datetime = new Date(datetime).toLocaleString().replace(","," ");
        var lastupdate = datetime.substring(0,datetime.length-3);
        return `<span style="font-size: 12px;">${lastupdate}</span>`
      ]]]

rollers_label:
  state:
    - value: "closed"
      color: black
      state: "Chiuse"
    - value: "open"
      color: var(--command-state-active-color)
  styles:
    card:
      - box-shadow: none

roller_program_layout:
  template:
    - grid_style
    - program_layout
  custom_fields:
    header:
      card:
        type: "custom:button-card"
        entity: "[[[return `input_boolean.rollers_program${variables.progId}`]]]"
        template: header_page_text
        icon: "mdi:calendar-remove"
        state:
          - value: "on"
            icon: "mdi:calendar-check"
            styles:
              icon:
                - color: var(--command-state-active-color)
        name: "[[[return `PROGRAMMA ${variables.progId}`]]]"
        label: "[[[return `Tapparelle / Programma ${variables.progId}`]]]"
    commandbar:
      card:
        type: "custom:button-card"
        template: roller_command_bar
        variables:
          progId: "[[[return variables.progId]]]"
    content:
      card:
        type: "custom:button-card"
        template: roller_program_content
        variables:
          progId: "[[[return variables.progId]]]"
        styles:
          card:
            - padding: 0px

roller_command_bar:
  template: command_bar
  card_mod:
    style: |
      ha-card.button-card-main {
        padding: 0px !important
      }
  styles:
    grid:
      - grid-template-areas: '"program back"'
      - grid-template-columns: 1fr 1fr
      - display: flex
      - justify-content: space-between
    card:
      - margin-left: -10px
      - height: 63px
  custom_fields:
    program:
      card:
        type: "custom:button-card"
        template: icon_state_header
        entity: "[[[return `input_boolean.rollers_program${variables.progId}`]]]"
        icon: mdi:power
        state:
          - value: "on"
            label: "Acceso"
            color: var(--command-state-active-color)
          - value: "off"
            label: "Spento"
            color: var(--command-state-color)
        styles:
          card:
            - margin-left: 10px
    back:
      card:
        type: "custom:button-card"
        template: button_go_back

roller_program_content:
  template:
    - grid_style
    - program_content
  custom_fields:
    program:
      card:
        type: "custom:button-card"
        template: rollers_program_schedule
        variables:
          progId: "[[[return variables.progId]]]"
    content:
      card:
        type: vertical-stack
        cards:
          - type: conditional
            conditions:
              - entity: binary_sensor.rs100_state
                state_not: "off"
            card:
              type: "custom:button-card"
              template: rollers_program_nightzone
              variables:
                progId: "[[[return variables.progId]]]"
                zone: "zn100"
          - type: conditional
            conditions:
              - entity: binary_sensor.rs200_state
                state_not: "off"
            card:
              type: "custom:button-card"
              template: rollers_program_dayzone
              variables:
                progId: "[[[return variables.progId]]]"
                zone: "zn200"

rollers_program_schedule:
  template: program_schedule
  custom_fields:
    days:
      card:
        type: "custom:button-card"
        template: roller_week
        variables:
          progId: "[[[return variables.progId;]]]"
    time:
      card:
        type: "custom:button-card"
        template: roller_time_picker
        variables:
          progId: "[[[return variables.progId;]]]"

roller_week:
  template: weekdays
  custom_fields:
    days:
      card:
        type: vertical-stack
        cards:
          - type: "custom:button-card"
            template: no_background
            name: "Giorni"
            styles:
              card:
                - padding-top: 0px
              name:
                - margin: 0px auto
                - font-size: large
          - type: grid
            columns: 4
            square: false
            cards:
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.rollers_monday_program${variables.progId}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.rollers_tuesday_program${variables.progId}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.rollers_wednesday_program${variables.progId}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.rollers_thursday_program${variables.progId}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.rollers_friday_program${variables.progId}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.rollers_saturday_program${variables.progId}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.rollers_sunday_program${variables.progId}`]]]"
              - type: "custom:button-card"
                template: heating_program_label
                entity: "[[[return `group.rollers_program${variables.progId}_days`]]]"
                layout: icon_name
                name: "Tutti"
                size: 100%
                show_label: false
                show_name: true
                styles:
                  card:
                    - height: 30px
                    - width: 60px

roller_time_picker:
  custom_fields:
    time:
      card:
        type: horizontal-stack
        cards:
          - entity: "[[[return `input_datetime.rollers_on_program${variables.progId}`]]]"
            <<: *timepicker_style
          - entity: "[[[return `input_datetime.rollers_off_program${variables.progId}`]]]"
            <<: *timepicker_style

rollers_program_nightzone:
  template: expander_template
  custom_fields:
    expander:
      card:
        <<: *expander-card-style
        padding: 0px
        title-card:
          type: "custom:button-card"
          template: rollers_program_expander_label
          variables:
            progId: "[[[return variables.progId]]]"
            zone: "zn100"
        cards:
          - <<: *divider-4px
          - type: entities
            <<: &rollers-entities-style
              card_mod:
                style:
                  .: |
                    ha-card {
                      box-shadow: none;
                    }
                  div.card-content:
                    div:
                      hui-input-number-entity-row:
                        $:
                          hui-generic-entity-row:
                            div: |
                              .state {
                                min-width: 60px !important
                              }
                            $: |
                              .info.text-content {
                                display: flex;
                              }
            entities:
              - entity: input_number.position_rs100_open_program1
                tap_action:
                  action: none
                card_mod:
                  style:
                    hui-generic-entity-row:
                      div: |
                        .state {
                          font-size: 0px;
                        }
                        .state:after {
                          {% if states("input_number.position_rs100_open_program1") | float(0) == 100.0 %}
                            {% set CONTENT = "APERTE" %}
                          {% elif states("input_number.position_rs100_open_program1") | float(0) == 0.0 %}
                            {% set CONTENT = "CHIUSE" %}
                          {% else %}
                            {% set CONTENT =  states("input_number.position_rs100_open_program1") | int | string + "%" %}
                          {%endif%}
                          font-size: 16px;
                          content: '{{ CONTENT }}';
                        }
              - entity: input_number.position_rs100_close_program1
                tap_action:
                  action: none
                card_mod:
                  style:
                    hui-generic-entity-row:
                      div: |
                        .state {
                          font-size: 0px;
                        }
                        .state:after {
                          {% if states("input_number.position_rs100_close_program1") | float(0) == 100.0 %}
                            {% set CONTENT = "APERTE" %}
                          {% elif states("input_number.position_rs100_close_program1") | float(0) == 0.0 %}
                            {% set CONTENT = "CHIUSE" %}
                          {% else %}
                            {% set CONTENT =  states("input_number.position_rs100_close_program1") | int | string + "%" %}
                          {%endif%}
                          font-size: 16px;
                          content: '{{ CONTENT }}';
                        }

rollers_program_dayzone:
  template: expander_template
  custom_fields:
    expander:
      card:
        <<: *expander-card-style
        padding: 0px
        title-card:
          type: "custom:button-card"
          template: rollers_program_expander_label
          variables:
            progId: "[[[return variables.progId]]]"
            zone: "zn200"
        cards:
          - <<: *divider-4px
          - <<: *mod-card-room
            card:
              type: entities
              <<: *rollers-entities-style
              entities:
                - entity: input_number.position_rs200_open_program1
                  tap_action:
                    action: none
                  card_mod:
                    style:
                      hui-generic-entity-row:
                        div: |
                          .state {
                            font-size: 0px;
                          }
                          .state:after {
                            {% if states("input_number.position_rs200_open_program1") | float(0) == 100.0 %}
                              {% set CONTENT = "APERTE" %}
                            {% elif states("input_number.position_rs200_open_program1") | float(0) == 0.0 %}
                              {% set CONTENT = "CHIUSE" %}
                            {% else %}
                              {% set CONTENT =  states("input_number.position_rs200_open_program1") | int | string + "%" %}
                            {%endif%}
                            font-size: 16px;
                            content: '{{ CONTENT }}';
                          }
                - entity: input_number.position_rs200_close_program1
                  tap_action:
                    action: none
                  card_mod:
                    style:
                      hui-generic-entity-row:
                        div: |
                          .state {
                            font-size: 0px;
                          }
                          .state:after {
                            {% if states("input_number.position_rs200_close_program1") | float(0) == 100.0 %}
                              {% set CONTENT = "APERTE" %}
                            {% elif states("input_number.position_rs200_close_program1") | float(0) == 0.0 %}
                              {% set CONTENT = "CHIUSE" %}
                            {% else %}
                              {% set CONTENT =  states("input_number.position_rs200_close_program1") | int | string + "%" %}
                            {%endif%}
                            font-size: 16px;
                            content: '{{ CONTENT }}';
                          }

rollers_program_expander_label:
  styles:
    grid:
      - grid-template-areas: '"label"'
      - background: none
      - display: flex
    card:
      - padding: 0px
      - box-shadow: none
    custom_fields:
      label:
        - width: 200px
  custom_fields:
    label:
      card:
        type: "custom:button-card"
        template: heating_program_label
        size: 50%
        entity: "[[[return `group.rollers_${variables.zone}_program${variables.progId}`]]]"
        name: "[[[return states[`input_text.${variables.zone}`].state;]]]"

rollers_nightzone_expander:
  template: expander_template
  custom_fields:
    expander:
      card:
        <<: *expander-card-style
        title-card:
          type: "custom:button-card"
          template: rollers_detail
          triggers_update:
            - group.rs100
          variables:
            zone: "[[[ return variables.zone;]]]"
            icon: "[[[ return variables.icon;]]]"
        cards:
          - <<: *divider-2px
          - type: custom:mod-card
            card_mod:
              style:
                hui-grid-card$: |
                  div#root {
                    background: var(--primary-background-color);
                  }
            card:
              type: grid
              columns: 2
              square: false
              cards:
                - type: conditional
                  conditions:
                    - entity: binary_sensor.rs101_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: rollers_detail
                    triggers_update:
                      - group.rs101
                    variables:
                      zone: 101
                      icon: "mdi:bed-outline"
                - type: conditional
                  conditions:
                    - entity: binary_sensor.rs102_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: rollers_detail
                    triggers_update:
                      - group.rs102
                    variables:
                      zone: 102
                      icon: "mdi:bed-outline"
                - type: conditional
                  conditions:
                    - entity: binary_sensor.rs103_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: rollers_detail
                    triggers_update:
                      - group.rs103
                    variables:
                      zone: 103
                      icon: "mdi:bed-outline"
                - type: conditional
                  conditions:
                    - entity: binary_sensor.rs104_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: rollers_detail
                    triggers_update:
                      - group.rs104
                    variables:
                      zone: 104
                      icon: "mdi:shower"

rollers_dayzone_expander:
  template: expander_template
  custom_fields:
    expander:
      card:
        <<: *expander-card-style
        title-card:
          type: "custom:button-card"
          template: rollers_detail
          triggers_update:
            - group.rs200
            - sensor.rz200
          variables:
            zone: "[[[ return variables.zone;]]]"
            icon: "[[[return variables.icon;]]]"
        cards:
          - <<: *divider-2px
          - type: "custom:mod-card"
            card_mod:
              style:
                hui-grid-card$: |
                  div#root {
                    background: var(--primary-background-color);
                  }
            card:
              type: grid
              columns: 2
              square: false
              cards:
                - type: conditional
                  conditions:
                    - entity: binary_sensor.rs201_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: rollers_detail
                    triggers_update:
                      - group.rs201
                    variables:
                      zone: 201
                      icon: "mdi:sofa-outline"
                - type: conditional
                  conditions:
                    - entity: binary_sensor.rs202_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: rollers_detail
                    triggers_update:
                      - group.rs202
                    variables:
                      zone: 202
                      icon: "mdi:countertop-outline"
                - type: conditional
                  conditions:
                    - entity: binary_sensor.rs203_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: rollers_detail
                    triggers_update:
                      - group.rs203
                    variables:
                      zone: 203
                      icon: "mdi:toilet"

rollers_ctrl:
  show_name: false
  show_label: false
  size: 60%
  styles:
    card:
      - background: none
      - box-shadow: none
      - padding-top: 4px
      - width: 50px
    icon:
      - filter: opacity(0.75)
  tap_action:
    action: call-service
    service: input_select.select_option
    service_data:
      entity_id: "[[[ return `input_select.rs${variables.zone}`; ]]]"
      option: "[[[ return variables.option; ]]]"

################
##### LUCI #####
################

lights_detail:
  template: no_background
  styles:
    card:
      - padding: 1%
    grid:
      - grid-template-areas: '"label" "lastupdate"'
      - grid-template-columns: 200px
      - grid-template-rows: 50px
      - column-gap: 5px
    custom_fields:
      label:
        - display: flex
        - justify-self: start
      lastupdate:
        - justify-self: start
  custom_fields:
    label:
      card:
        type: "custom:button-card"
        template:
          - no_background
          - lights_label
        entity: >
          [[[
            return `light.group_lz${variables.zone}`
          ]]]
        name: "[[[return states[`input_text.zn${variables.zone}`].state;]]]"
        styles:
          card:
            - width: 200px
          name:
            - justify-self: start
            - font-weight: bold
            - font-size: 16px
            - align-self: middle
            - padding-bottom: 4px
            - padding-right: 5px
            - padding-top: 5px
            - margin-left: -25px
          img_cell:
            - width: 50px
            - margin-right: auto
          icon:
            - width: 70%
            - height: 50px
        variables:
          zone: "[[[return variables.zone;]]]"
          icon: "[[[ return variables.icon;]]]"
        tap_action:
          action: call-service
          service: light.toggle
          service_data:
            entity_id: entity
    lastupdate: >
      [[[
        if (!variables.zone) return `</>`;
        var datetime =  states[`light.group_lz${variables.zone}`].last_changed.split("T");
        datetime = new Date(datetime).toLocaleString().replace(","," ");
        var lastupdate = datetime.substring(0,datetime.length-3);
        return `<span style="font-size: 12px;">${lastupdate }</span>`
      ]]]

lights_label:
  layout: icon_name
  icon: "[[[ return variables.icon;]]]"
  state:
    - value: "off"
      color: black
    - value: "on"
      color: "#DCA200"
  styles:
    card:
      - box-shadow: none

lights_expander_nightzone:
  template: expander_template
  custom_fields:
    expander:
      card:
        <<: *expander-card-style
        title-card:
          type: "custom:button-card"
          template: lights_detail
          triggers_update:
            - light.group_lz100
          variables:
            zone: 100
            icon: "[[[ return variables.icon;]]]"
        cards:
          - <<: *divider-4px
          - <<: *mod-card-room
            card:
              type: grid
              columns: 2
              square: false
              cards:
                - type: conditional
                  conditions:
                    - entity: binary_sensor.lz101_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: lights_detail_room
                    triggers_update:
                      - light.group_lz101
                    variables:
                      navigation_path: "lights-nightzone-room1"
                      zone: 101
                      icon: "mdi:bed-outline"
                - type: conditional
                  conditions:
                    - entity: binary_sensor.lz102_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: lights_detail_room
                    triggers_update:
                      - light.group_lz102
                    variables:
                      navigation_path: "lights-nightzone-room2"
                      zone: 102
                      icon: "mdi:bed-outline"
                - type: conditional
                  conditions:
                    - entity: binary_sensor.lz103_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: lights_detail_room
                    triggers_update:
                      - light.group_lz103
                    variables:
                      navigation_path: "lights-nightzone-room3"
                      zone: 103
                      icon: "mdi:bed-outline"
                - type: conditional
                  conditions:
                    - entity: binary_sensor.lz104_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: lights_detail_room
                    triggers_update:
                      - light.group_lz104
                    variables:
                      navigation_path: "lights-nightzone-room4"
                      zone: 104
                      icon: "mdi:shower"

lights_expander_dayzone:
  template: expander_template
  custom_fields:
    expander:
      card:
        <<: *expander-card-style
        title-card:
          type: "custom:button-card"
          template: lights_detail
          triggers_update:
            - light.group_lz200
          variables:
            zone: 200
            icon: "[[[ return variables.icon;]]]"
        cards:
          - <<: *divider-4px
          - <<: *mod-card-room
            card:
              type: grid
              columns: 2
              square: false
              cards:
                - type: conditional
                  conditions:
                    - entity: binary_sensor.lz201_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: lights_detail_room
                    triggers_update:
                      - light.group_lz201
                    variables:
                      navigation_path: "lights-dayzone-room1"
                      zone: 201
                      icon: "mdi:sofa-outline"
                - type: conditional
                  conditions:
                    - entity: binary_sensor.lz202_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: lights_detail_room
                    triggers_update:
                      - light.group_lz202
                    variables:
                      navigation_path: "lights-dayzone-room1"
                      zone: 202
                      icon: "mdi:countertop-outline"
                - type: conditional
                  conditions:
                    - entity: binary_sensor.lz203_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: lights_detail_room
                    triggers_update:
                      - light.group_lz203
                    variables:
                      navigation_path: "lights-dayzone-room1"
                      zone: 203
                      icon: "mdi:toilet"

lights_expander_outdoor:
  template: expander_template
  custom_fields:
    expander:
      card:
        <<: *expander-card-style
        title-card:
          type: "custom:button-card"
          template: lights_detail
          triggers_update:
            - light.group_lz300
          variables:
            zone: 300
            icon: "[[[ return variables.icon;]]]"
        cards:
          - <<: *divider-4px
          - <<: *mod-card-room
            card:
              type: grid
              columns: 2
              square: false
              cards:
                - type: conditional
                  conditions:
                    - entity: binary_sensor.lz301_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: lights_detail_room
                    triggers_update:
                      - light.group_lz301
                    variables:
                      navigation_path: "lights-outdoor-room1"
                      zone: 301
                      icon: "mdi:outdoor-lamp"
                - type: conditional
                  conditions:
                    - entity: binary_sensor.lz302_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: lights_detail_room
                    triggers_update:
                      - light.group_lz302
                    variables:
                      navigation_path: "lights-outdoor-room2"
                      zone: 302
                      icon: "mdi:outdoor-lamp"
                - type: conditional
                  conditions:
                    - entity: binary_sensor.lz303_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: lights_detail_room
                    triggers_update:
                      - light.group_lz303
                    variables:
                      navigation_path: "lights-outdoor-room3"
                      zone: 303
                      icon: "mdi:outdoor-lamp"
                - type: conditional
                  conditions:
                    - entity: binary_sensor.lz304_state
                      state_not: "off"
                  card:
                    type: "custom:button-card"
                    template: lights_detail_room
                    triggers_update:
                      - light.group_lz304
                    variables:
                      navigation_path: "lights-outdoor-room4"
                      zone: 304
                      icon: "mdi:outdoor-lamp"

lights_detail_room:
  template:
    - no_background
    - lights_detail
  styles:
    grid:
      - grid-template-areas: '"label control" "lastupdate palette"'
      - grid-template-columns: 170px 1fr
      - grid-template-rows: 50px
      - column-gap: 5px
    custom_fields:
      control:
        - width: 40px
        - margin-left: 15px
      palette:
        - justify-self: start
  custom_fields:
    control:
      card:
        type: "custom:button-card"
        template: no_background
        icon: "mdi:palette-outline"
        styles:
          icon:
            - color: >
                [[[
                  if (states["input_select.light_type"].state == "color")
                  {
                    var light = `light.group_lz${variables.zone}`
                    if (states[light].state) {
                      if (states[light].attributes.rgb_color != undefined) {
                      var color = states[light].attributes.rgb_color
                      return "rgb("+color[0]+","+color[1]+","+color[2]+")";
                      }
                    }
                  }
                  return "#DCA200";
                ]]]
        size: 80%
        tap_action:
          action: navigate
          navigation_path: "[[[return '/lovelace-kairoshub/'+ variables.navigation_path]]]"
    palette: >
      [[[
        return `<span style="font-size: 12px;">Personalizza</span>`
      ]]]

lights_ctrl:
  template: basic_page_layout
  custom_fields:
    header:
      card:
        type: "custom:button-card"
        template: header_page_text
        icon: "[[[return variables.scene ? 'mdi:cog' : 'mdi:lightbulb']]]"
        name: "[[[return variables.scene ? 'IMPOSTAZIONI' : 'LUCI']]]"
        label: >
          [[[
            var location = "Luci"
            var zone = variables.zone.replace(/.$/,"0")
            var zonename = states[`input_text.zn${zone}`].state
            var room = states[`input_text.zn${variables.zone}`].state;
            if (variables.scene) {
              room = variables.scene;
              location = `Impostazioni / ${location}`;
            }
            return `${location} / ${zonename} / ${room}`;
          ]]]
    commandbar:
      card:
        type: "custom:button-card"
        template: command_bar
        style: |
          ha-card.button-card-main {
            padding: 0px !important
          }
          div#container {
            justify-items: right;
          }
        custom_fields:
          commands:
            card:
              type: horizontal-stack
              cards:
                - type: "custom:button-card"
                  name: "Copia"
                  hold_action:
                    confirmation:
                      text: "Vuoi copiare questa impostazione per tutte le luci di questa zona?"
                    action: call-service
                    service: input_boolean.turn_on
                    service_data:
                      entity_id: >
                        [[[
                          return `input_boolean.copy_lights_zn${variables.zone}`;
                        ]]]
                  styles:
                    card:
                      - background: none
                      - color: "#f4f4f4"
                      - box-shadow: none
                      - width: 200px
                      - left: -474px
                      - display: "[[[ if (variables.hideCopyBtn) return 'none';]]]"
                  style: |
                    :host {
                      align-self: center;
                    }
                - type: "custom:button-card"
                  template: button_go_back

light_program_ctrl:
  template: lights_ctrl
  custom_fields:
    header:
      card:
        type: "custom:button-card"
        template: header_page_text
        entity: "[[[return `input_boolean.lights_program${variables.progId}`]]]"
        icon: "mdi:calendar-remove"
        state:
          - value: "on"
            icon: "mdi:calendar-check"
            styles:
              icon:
                - color: var(--command-state-active-color)
        name: "[[[return `PROGRAMMA ${variables.progId}`]]]"
        label: >
          [[[
            var zoneName = states[`input_text.zn${variables.zone}`].state
            return `Luci / Programma ${variables.progId} / ${zoneName}`;
          ]]]

light_program_layout:
  template:
    - grid_style
    - program_layout
  custom_fields:
    header:
      card:
        type: "custom:button-card"
        entity: "[[[return `input_boolean.lights_program${variables.progId}`]]]"
        template: header_page_text
        icon: "mdi:calendar-remove"
        state:
          - value: "on"
            icon: "mdi:calendar-check"
            styles:
              icon:
                - color: var(--command-state-active-color)
        name: "[[[return `PROGRAMMA ${variables.progId}`]]]"
        label: "[[[return `Luci / Programma ${variables.progId}`]]]"
    commandbar:
      card:
        type: "custom:button-card"
        template: light_command_bar
        variables:
          progId: "[[[return variables.progId]]]"
    content:
      card:
        type: "custom:button-card"
        template: light_program_content
        variables:
          progId: "[[[return variables.progId]]]"
        styles:
          card:
            - padding: 0px

light_program_content:
  template:
    - grid_style
    - program_content
  custom_fields:
    program:
      card:
        type: "custom:button-card"
        template: lights_program_schedule
        variables:
          progId: "[[[return variables.progId]]]"
    content:
      card:
        type: vertical-stack
        cards:
          - type: conditional
            conditions:
              - entity: binary_sensor.lz100_state
                state_not: "off"
            card:
              type: "custom:button-card"
              template: lights_program_ctrl
              variables:
                progId: "[[[return variables.progId]]]"
                zone: "zn100"
                navigation_path: >
                  [[[
                    return `lights-nightzone-program${variables.progId}`;
                  ]]]
          - type: conditional
            conditions:
              - entity: binary_sensor.lz200_state
                state_not: "off"
            card:
              type: "custom:button-card"
              template: lights_program_ctrl
              variables:
                progId: "[[[return variables.progId]]]"
                zone: "zn200"
                navigation_path: >
                  [[[
                    return `lights-dayzone-program${variables.progId}`;
                  ]]]
          - type: conditional
            conditions:
              - entity: binary_sensor.lz300_state
                state_not: "off"
            card:
              type: "custom:button-card"
              template: lights_program_ctrl
              variables:
                progId: "[[[return variables.progId]]]"
                zone: "zn300"
                navigation_path: >
                  [[[
                    return `lights-dayzone-program${variables.progId}`;
                  ]]]

light_command_bar:
  template: command_bar
  card_mod:
    style: |
      ha-card.button-card-main {
        padding: 0px !important
      }
  styles:
    grid:
      - grid-template-areas: '"program back"'
      - grid-template-columns: 1fr 1fr
      - display: flex
      - justify-content: space-between
    card:
      - margin-left: -10px
      - height: 63px
  custom_fields:
    program:
      card:
        type: "custom:button-card"
        template: icon_state_header
        entity: "[[[return `input_boolean.lights_program${variables.progId}`]]]"
        icon: mdi:power
        state:
          - value: "on"
            label: "Acceso"
            color: var(--command-state-active-color)
          - value: "off"
            label: "Spento"
            color: var(--command-state-color)
        styles:
          card:
            - margin-left: 10px
    back:
      card:
        type: "custom:button-card"
        template: button_go_back

light_program:
  styles:
    grid:
      - grid-template-areas: '"label select days time"'
      - grid-template-columns: 160px 140px 100px 1fr
      - align-items: self-end
    card:
      - height: auto
      - width: 750px
      - padding: 0px
    custom_fields:
      label:
        - margin-top: 30px
      select:
        - margin-bottom: 14px
      days:
        - margin-bottom: 14px
      time:
        - margin-top: 10px
        - margin-left: 30px

lights_program_schedule:
  template: program_schedule
  custom_fields:
    days:
      card:
        type: "custom:button-card"
        template: light_week
        variables:
          progId: "[[[return variables.progId;]]]"
    time:
      card:
        type: "custom:button-card"
        template: light_time_picker
        variables:
          progId: "[[[return variables.progId;]]]"

light_time_picker:
  custom_fields:
    time:
      card:
        type: horizontal-stack
        cards:
          - entity: "[[[return `input_datetime.lights_on_program${variables.progId}`]]]"
            <<: *timepicker_style
          - entity: "[[[return `input_datetime.lights_off_program${variables.progId}`]]]"
            <<: *timepicker_style

lights_program_ctrl:
  template: program_ctrl
  styles:
    card:
      - background: var(--secondary-background-color)
    grid:
      - display: flex
      - justify-content: space-between
  custom_fields:
    label:
      card:
        type: "custom:button-card"
        template: heating_program_label
        size: 50%
        entity: "[[[return `group.lights_${variables.zone}_program${variables.progId}`]]]"
        name: "[[[return states[`input_text.${variables.zone}`].state;]]]"
    temp:
      card:
        type: "custom:button-card"
        template: icon_ctrl_style
        icon: "mdi:palette-outline"
        size: 20%
        tap_action:
          action: navigate
          navigation_path: >
            [[[
              return `/lovelace-kairoshub/${variables.navigation_path}`;
            ]]]

light_week:
  template: weekdays
  custom_fields:
    days:
      card:
        type: vertical-stack
        cards:
          - type: "custom:button-card"
            template: no_background
            name: "Giorni"
            styles:
              card:
                - padding-top: 0px
              name:
                - margin: 0px auto
                - font-size: large
          - type: grid
            columns: 4
            square: false
            cards:
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.lights_monday_program${variables.progId}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.lights_tuesday_program${variables.progId}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.lights_wednesday_program${variables.progId}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.lights_thursday_program${variables.progId}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.lights_friday_program${variables.progId}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.lights_saturday_program${variables.progId}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.lights_sunday_program${variables.progId}`]]]"
              - type: "custom:button-card"
                template: heating_program_label
                entity: "[[[return `group.lights_program${variables.progId}_days`]]]"
                layout: icon_name
                name: "Tutti"
                size: 100%
                show_label: false
                show_name: true
                styles:
                  card:
                    - height: 30px
                    - width: 60px

lights_settings_room:
  template: no_background
  styles:
    grid:
      - grid-template-areas: '"state title control"'
      - grid-template-columns: 40px auto 30px
      - grid-template-rows: 40px
    card:
      - display: flex
      - flex-direction: row
      - align-items: center
      - padding: 0px
      - width: 735px
      - margin-left: 15px
    custom_fields:
      state:
        - flex: 0 0 40px
        - position: relative;
        - display: inline-block;
        - width: 40px;
        - height: 40px;
        - color: var(--paper-item-icon-color);
        - border-radius: 50%;
        - text-align: center;
        - background-size: cover;
        - line-height: 40px;
        - vertical-align: middle;
        - box-sizing: border-box;
      title:
        - justify-self: start
  custom_fields:
    state: >
      [[[
        return `<ha-icon icon="${variables.icon}" style="width: 24px"></ha-icon>`
      ]]]
    title:
      card:
        type: "custom:button-card"
        template: no_background
        name: "[[[ return variables.name; ]]]"
        styles:
          card:
            - padding: 0px
    control:
      card:
        type: "custom:button-card"
        template: no_background
        icon: "mdi:palette-outline"
        styles:
          card:
            - height: 60px
          icon:
            - color: "#DCA200"
            - width: 24px
        tap_action:
          action: navigate
          navigation_path: "[[[return '/lovelace-kairoshub/'+ variables.navigation_path]]]"

###############
### SCENARI ###
###############

scenes_program:
  show_label: true
  show_icon: true
  styles:
    grid:
      - grid-template-areas: '"i l . ." ". select days time"'
      - grid-template-columns: 50px 205px 1fr
      - grid-template-rows: 30px auto
      - row-gap: 5px
    card:
      - height: auto
      - padding: 0px
    label:
      - justify-self: start
      - overflow: visible
    icon:
      - width: 100%
    custom_fields:
      select:
        - margin-left: -40px
        - margin-right: 25px
      days:
        - margin-right: 5px
  custom_fields:
    select:
      card:
        type: horizontal-stack
        cards:
          - type: "custom:button-card"
            template: scenes_ctrl
            icon: "mdi:chevron-left"
            variables:
              service: "select_previous"
              scene: "[[[return variables.scene]]]"
          - type: "custom:button-card"
            entity: "[[[return `input_select.scene_${variables.scene}`]]]"
            show_state: true
            tap_action:
              action: none
            styles:
              card:
                - width: 120px
            state:
              - value: "Disattivo"
                color: "#F32000"
                icon: mdi:close-circle-outline
              - value: "Programmato"
                color: "#009213"
                icon: mdi:alarm
              - value: "Automatico"
                color: "#FFB600"
                icon: mdi:weather-sunny
          - type: "custom:button-card"
            template: scenes_ctrl
            icon: "mdi:chevron-right"
            variables:
              service: "select_next"
              scene: "[[[return variables.scene]]]"

scene_daynight:
  template: expander_template
  custom_fields:
    expander:
      card:
        <<: *expander-card-style
        title-card:
          type: "custom:button-card"
          template: scenes_program
          layout: icon_label
          icon: "mdi:theme-light-dark"
          size: 100%
          label: "Scenario Giorno / Notte"
          variables:
            scene: "day"
          custom_fields:
            days:
              card:
                type: "custom:button-card"
                template: scenes_days
                variables:
                  scene: "day"
            time:
              card:
                type: horizontal-stack
                cards:
                  - type: "custom:time-picker-card"
                    entity: input_datetime.scene_day_on
                    <<: &time-picker-conf
                      minute_step: 15
                      layout:
                        embedded: true
                        align_controls: right
                      card_mod:
                        style:
                          .: |
                            :host {
                            {% if not is_state('input_select.scene_day', 'Programmato') %}
                              pointer-events: none;
                            {% endif %}
                            }
                            state-badge {
                              display: none;
                            }
                            .time-picker-row.embedded {
                              flex-direction: column;
                            }
                          time-unit:
                            $: |
                              .time-input {
                                {% if not is_state('input_select.scene_day', 'Programmato') %}
                                  pointer-events: none;
                                  background-color: var(--disabled-text-color) !important;
                                {% endif %}
                              }
                  - type: "custom:time-picker-card"
                    entity: input_datetime.scene_day_off
                    <<: *time-picker-conf
        cards:
          - <<: *divider-2px
          - type: grid
            columns: 2
            square: false
            cards:
              - type: entities
                entities:
                  - entity: input_boolean.rollers_scene_day
              - type: entities
                entities:
                  - entity: input_boolean.lights_scene_day

scene_athome:
  template: expander_template
  custom_fields:
    expander:
      card:
        <<: *expander-card-style
        title-card:
          type: "custom:button-card"
          template: scenes_program
          layout: icon_label
          icon: "mdi:home-outline"
          size: 100%
          label: "Scenario In Casa / Fuori Casa"
          variables:
            scene: "athome"
        cards:
          - <<: *divider-2px
          - type: grid
            columns: 2
            square: false
            cards:
              - type: entities
                entities:
                  - entity: input_boolean.rollers_scene_athome
              - type: entities
                entities:
                  - entity: input_boolean.lights_scene_athome

scenes_days:
  template: weekdays
  custom_fields:
    days:
      card:
        type: vertical-stack
        cards:
          - type: "custom:button-card"
            template: no_background
            name: "Giorni"
            styles:
              card:
                - padding-top: 0px
              name:
                - margin: 0px auto
                - font-size: large
          - type: grid
            columns: 3
            square: false
            cards:
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.scene_monday_${variables.scene}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.scene_tuesday_${variables.scene}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.scene_wednesday_${variables.scene}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.scene_thursday_${variables.scene}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.scene_friday_${variables.scene}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.scene_saturday_${variables.scene}`]]]"
              - type: custom:button-card
                template: heating_program_day
                entity: "[[[return `input_boolean.scene_sunday_${variables.scene}`]]]"
              - type: "custom:button-card"
                template: heating_program_label
                entity: "[[[return `group.scene_${variables.scene}_days`]]]"
                layout: icon_name
                size: 100%
                show_label: false
                show_name: true
                styles:
                  card:
                    - height: 30px
                    - width: 60px

scenes_ctrl:
  tap_action:
    action: call-service
    service: "[[[return `input_select.${variables.service}`]]]"
    service_data:
      entity_id: "[[[ return `input_select.scene_${variables.scene}`; ]]]"
  size: 100%
  styles:
    card:
      - padding: 0px
      - margin-top: 20px

################
# IMPOSTAZIONI #
################

settings_grid:
  template: grid_style
  styles:
    grid:
      - grid-template-areas: '"header" "content"'
      - grid-template-rows: min-content min-content
      - justify-items: center
      - row-gap: 10px
    custom_fields:
      header:
        - justify-self: start

settings_card:
  template: feedback_click
  tap_action:
    action: navigate
    navigation_path: "[[[return '/lovelace-kairoshub/'+ variables.navigation_path]]]"
  styles:
    card:
      - width: 165px
      - height: 115px
      - box-shadow: 1px 5px 8px rgba(0, 0, 0, 0.3)
      - margin: 5px
      - border: solid 1px rgb(0 0 0 / 10%)

setting_layout:
  template: basic_page_layout
  styles:
    grid:
      - align-items: start
      - column-gap: 0px
      - row-gap: 10px
    custom_fields:
      header:
        - justify-self: start
      content:
        - text-align: start
        - height: 290px
        - overflow: visible
  custom_fields:
    header:
      card:
        type: "custom:button-card"
        label: "[[[return 'Impostazioni / ' + variables.label]]]"
        template: header_page_text
        name: "IMPOSTAZIONI"
        icon: "mdi:cog"
    commandbar:
      card:
        type: "custom:button-card"
        template: command_bar
        style: |
          ha-card.button-card-main {
            padding: 0px !important
          }
          div#container {
            justify-items: right;
          }
        custom_fields:
          commands:
            card:
              type: horizontal-stack
              cards:
                - type: "custom:button-card"
                  template: button_go_back

alexa_button_style:
  styles:
    card:
      - width: 150px
      - bottom: -10px
      - padding: 6px 0px
      - font-weight: bold
    name:
      - color: "#f4f4f4"
  style: |
    :host {
      align-self: center;
    }

################
## ASSISTENZA ##
################

assistance_grid:
  template: grid_style
  styles:
    grid:
      - grid-template-areas: '"header header" "system_data assistance" "system_data kairos_info"'
      - grid-template-columns: 1fr 55%
      - grid-template-rows: 50px min-content 145px
      - justify-items: start
      - align-items: start
      - column-gap: 10px
      - row-gap: 10px
      - margin-right: 10px
      - margin-left: 10px
    custom_fields:
      system_data:
        - justify-self: stretch
      assistance:
        - display: grid
        - justify-self: stretch
      kairos_info:
        - text-align: start

assistance_info:
  styles:
    card:
      - color: var(--primary-text-color)
      - text-transform: capitalize
      - padding: 12px 16px 16px
    grid:
      - grid-template-areas: '"i n" "content content"'
      - grid-template-columns: 30px 1fr
      - grid-template-rows: min-content 1fr
    name:
      - place-self: start
      - line-height: 48px
      - font-size: 20px
      - font-weight: 500
      - color: var(--ha-card-header-color)
      - padding-left: 5px
    img_cell:
      - justify-content: start
      - align-items: start
      - margin: none
    icon:
      - color: var(--ha-card-header-color)
      - width: 80%
  custom_fields:
    content: >
      [[[
        return `
          <div class="assistance_content" style="text-align: left; font-size: 12px">

            <div>
              <ha-icon icon="mdi:account" style="width: 24px; padding:5px; color: var(--ha-card-header-color);"></ha-icon>
              <label style="font-weight: bold ">Intestatario impianto:</label>
              <span > ${ states[ variables.systemOwner ].state} </span>
            </div>

            <div>
              <ha-icon icon="mdi:identifier" style="width: 24px; padding:5px; color: var(--ha-card-header-color);"></ha-icon>
              <label style="font-weight: bold; ">Identificativo impianto:</label>
              <span > ${ states[ variables.systemCode ].state} </span>
            </div>

            <div>
              <ha-icon icon="mdi:key" style="width: 24px; padding:5px; color: var(--ha-card-header-color);"></ha-icon>
              <label style="font-weight: bold; ">Chiave impianto:</label>
              <span > ${ states[ variables.systemKey ].state} </span>
            </div>

            <div>
              <ha-icon icon="mdi:home-assistant" style="width: 24px; padding:5px; color: var(--ha-card-header-color);"></ha-icon>
              <label style="font-weight: bold ">Stato impianto:</label>
              <span > ${ states[ variables.systemState ].state} </span>
            </div>

            <div>
              <ha-icon icon="mdi:cellphone-arrow-down" style="width: 24px; padding:5px; color: var(--ha-card-header-color);"></ha-icon>
              <label style="font-weight: bold ">Versione software:</label>
              <span > ${ states[ variables.kairoshubSwVersion ].state} </span>
            </div>

          </div>
        `
      ]]]

alexa_command_bar:
  styles:
    grid:
      - grid-template-areas: '"integration back"'
      - grid-template-columns: 1fr 1fr
      - display: flex
      - justify-content: space-between
      - flex-direction: row-reverse
    card:
      - background: none
      - box-shadow: none
      - width: 800px
      - padding: 6px 0px
  custom_fields:
    back:
      card:
        type: custom:button-card
        template: button_go_back
        tap_action:
          action: navigate
          navigation_path: /lovelace-kairoshub/impostazioni
        styles:
          card:
            - width: 150px
            - bottom: -10px
            - padding: 6px 0px

command_bar:
  styles:
    grid:
      - grid-template-areas: '"commands"'
    card:
      - margin-top: 0.5px
      - margin-bottom: 0px
      - box-shadow: 1px -1px 8px rgba(0, 0, 0, 0.3)
      - background: "#333333"
      - text-color: white
      - position: fixed
      - bottom: 0px
      - z-index: 100
    custom_fields:
      commands:
        - margin-top: 3px
        - height: 60px
